import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    
     static int swap = 0 , count = 0 ;
 
 static void quickSort( int ar[] , int start , int end )
 {
  if( start < end )
  {
   int j = partition( ar , start , end ) ;
      
   quickSort( ar , start , j - 1 ) ;
      
   quickSort( ar , j + 1 , end ) ;
      
  }
 }
    static int partition( int ar[] , int start , int end)
	{
		int item = ar[end] , p = start , temp ;
		for( int i = start ; i < end ; i++ )
		{
			if( ar[i] <= item )
			{ 
				temp = ar[i] ;
				ar[i] = ar[p] ;
				ar[p] = temp ;
                swap++;
				p++;
			}
			
		}
		ar[end] = ar[p] ;
		ar[p] = item ;
        swap++;
        return p ;
	}

    static void insertionSort(int ar[]){
        for(int i=1;i<(ar.length);i++){
               int temp=0;
               for(int j=i;j>0;j--){
                   
                   if(ar[j]<ar[j-1]){
                       temp = ar[j-1];
                       ar[j-1] = ar[j];
                       ar[j]=temp;
                       count++;
                   }
                       
               }
               
           }
        
    }
    public static void main(String[] args) {
        
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int ar[] = new int[n];
        int ar1[] = new int[n];
        for(int i=0;i<n;i++){
            
            ar[i] = in.nextInt();
            ar1[i] = ar[i];
        }
        
        quickSort( ar , 0 , n - 1) ;
        insertionSort(ar1);
        System.out.println(count-swap);
    }
}
